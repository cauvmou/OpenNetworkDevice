openapi: 3.0.3
info:
  title: OpenNetworkDevice
  description: |-
    This is the API documentation for OpenNetworkDevice. OND is fully manageable via the built-in Rest API.
  license:
    name: GNU General Public License v3.0
    url: https://www.gnu.org/licenses/gpl-3.0.html
  version: 0.0.1
tags:
  - name: interface
    description: Everything directly interface related
  - name: sub-interface
    description: Everything related to 802.1Q VLAN-Interfaces
  - name: ipv4
    description: Everything Ipv4 related.
  - name: routing
    description: Everything related to static routes
paths:
  /conf/if:
    get:
      tags:
        - interface
      description: Get all interfaces on device
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Interface'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/PrivilegeError'
  /conf/if/{name}:
    get:
      tags:
        - interface
      description: Get the specified interface
      parameters:
        - name: name
          in: path
          description: The name of the interface
          required: true
          schema:
            type: string
            example: ens160
        - name: physical
          in: query
          required: false
          schema:
            type: string
            example: 0c:25:fc:dd:00:00
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interface'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/PrivilegeError'
    patch:
      tags:
        - interface
      description: Get the specified interface
      parameters:
        - name: name
          in: path
          description: The name of the interface
          required: true
          schema:
            type: string
            example: ens160
        - name: physical
          in: query
          required: false
          schema:
            type: string
            example: 0c:25:fc:dd:00:00
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interface'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/PrivilegeError'
  /conf/if/{name}/sub:
    get:
      tags:
        - sub-interface
      description: Get the specified sub-interface
      parameters:
        - name: name
          in: path
          description: The name of the interface
          required: true
          schema:
            type: string
            example: ens160
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interface'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/PrivilegeError'
    post:
      tags:
        - sub-interface
      description: Creates the specified sub-interface
      parameters:
        - name: vlan
          in: query
          description: The vlan-id of the new sub-interface
          required: true
          schema:
            type: integer
            example: 10
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interface'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/PrivilegeError'
    delete:
      tags:
        - sub-interface
      description: Delete the specified sub-interface
      parameters:
        - name: vlan
          in: query
          description: The vlan-id of the new sub-interface
          required: true
          schema:
            type: integer
            example: 10
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interface'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/PrivilegeError'

  /conf/if/{name}/ipv4:
    get:
      tags:
        - ipv4
      description: Get the ipv4 configuration from the specified interface
      parameters:
        - name: name
          in: path
          description: The name of the interface
          required: true
          schema:
            type: string
            example: ens160
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ipv4Address'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/PrivilegeError'
    post:
      tags:
        - ipv4
      description: Edit the ipv4 configuration of the specified interface
      parameters:
        - name: name
          in: path
          description: The name of the interface
          required: true
          schema:
            type: string
            example: ens160
        - name: address
          in: query
          required: true
          schema:
            type: string
            example: 10.0.0.4
        - name: suffix
          in: query
          required: true
          schema:
            type: integer
            format: uint8
            example: 24
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ipv4Address'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/PrivilegeError'
    patch:
      tags:
        - ipv4
      description: Update the ipv4 configuration of the specified interface
      parameters:
        - name: name
          in: path
          description: The name of the interface
          required: true
          schema:
            type: string
            example: ens160
        - name: address
          in: query
          required: false
          schema:
            type: string
            example: 10.0.0.4
        - name: suffix
          in: query
          required: false
          schema:
            type: integer
            format: uint8
            example: 24
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ipv4Address'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/PrivilegeError'
    put:
      tags:
        - ipv4
      description: Overwrite the ipv4 configuration of the specified interface
      parameters:
        - name: name
          in: path
          description: The name of the interface
          required: true
          schema:
            type: string
            example: ens160
        - name: address
          in: query
          required: true
          schema:
            type: string
            example: 10.0.0.4
        - name: suffix
          in: query
          required: true
          schema:
            type: integer
            format: uint8
            example: 24
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ipv4Address'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/PrivilegeError'
    delete:
      tags:
        - ipv4
      description: Delete the ipv4 configuration of the specified interface
      parameters:
        - name: name
          in: path
          description: The name of the interface
          required: true
          schema:
            type: string
            example: ens160
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ipv4Address'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/PrivilegeError'
  /conf/routing/route:
    get:
      tags:
        - routing
      description: Get all the routes and their metadata
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/PrivilegeError'
    post:
      tags:
        - routing
      description: Get the specified route
      parameters:
        - name: address
          in: query
          required: true
          schema:
            type: string
            example: 10.0.0.4
        - name: suffix
          in: query
          required: true
          schema:
            type: integer
            format: uint8
            example: 24
        - name: next
          in: query
          required: true
          schema:
            type: string
            example: ens160
        - name: ad
          in: query
          required: false
          schema:
            type: integer
            example: 1
        - name: tag
          in: query
          required: false
          schema:
            type: integer
            example: 10
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/PrivilegeError'
  /conf/routing/route/{route-id}:
    get:
      tags:
        - routing
      description: Get the specified route
      parameters:
        - name: route-id
          in: path
          description: The name of the interface
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/PrivilegeError'
    patch:
      tags:
        - routing
      description: Get the specified route
      parameters:
        - name: route-id
          in: path
          description: The name of the interface
          required: true
          schema:
            type: integer
            example: 1
        - name: address
          in: query
          required: false
          schema:
            type: string
            example: 10.0.0.4
        - name: suffix
          in: query
          required: false
          schema:
            type: integer
            format: uint8
            example: 24
        - name: next
          in: query
          required: false
          schema:
            type: string
            example: ens160
        - name: ad
          in: query
          required: false
          schema:
            type: integer
            example: 1
        - name: tag
          in: query
          required: false
          schema:
            type: integer
            example: 10
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/PrivilegeError'
    put:
      tags:
        - routing
      description: Get the specified route
      parameters:
        - name: route-id
          in: path
          description: The name of the interface
          required: true
          schema:
            type: integer
            example: 1
        - name: address
          in: query
          required: true
          schema:
            type: string
            example: 10.0.0.4
        - name: suffix
          in: query
          required: true
          schema:
            type: integer
            format: uint8
            example: 24
        - name: next
          in: query
          required: true
          schema:
            type: string
            example: ens160
        - name: ad
          in: query
          required: false
          schema:
            type: integer
            example: 1
        - name: tag
          in: query
          required: false
          schema:
            type: integer
            example: 10
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/PrivilegeError'
    delete:
      tags:
        - routing
      description: Get the specified route
      parameters:
        - name: route-id
          in: path
          description: The name of the interface
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/PrivilegeError'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-KEY
      in: header
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
    PrivilegeError:
      description: API key does not have clearance to access or modify the requested resource
  schemas:
    Interface:
      type: object
      properties:
        id:
          type: integer
          format: uint32
          description: The NIC-Interface ID
          example: 1
        name:
          type: string
          description: The NIC-Interface name
          example: ens160
        vlan-id:
          type: integer
          format: uint16
          description: The VLAN of the sub interface (IEEE 802.1Q)
          example: null
        state:
          type: string
          description: Is the link/line protocol up
          enum:
            - up
            - lower-up
            - down
          example: up
        physical:
          type: string
          description: The mac-address of the interface
          example: 0c:25:fc:dd:00:00
        ipv4:
          $ref: '#/components/schemas/Ipv4Address'
    Ipv4Address:
      type: object
      properties:
        address:
          type: string
          description: The IPv4 address
          example: 10.0.0.1
        network:
          type: string
          description: The IPv4 network address
          example: 10.0.0.0
        broadcast:
          type: string
          description: The broadcast address for the network
          example: 10.0.0.254
        netmask:
          type: string
          description: The netmask of the address
          example: 255.255.255.0
        suffix:
          type: integer
          description: The suffix of the address
          example: 24
    Route:
      type: object
      properties:
        id:
          type: integer
          format: uint64
          description: The ID of the route, used to perform configuration
          example: 1
        dest:
          description: The network the route is pointing towards
          type: object
          properties:
            network:
              type: string
              description: The IPv4 destination network
              example: 10.0.0.0
            netmask:
              type: string
              description: The netmask of the network
              example: 255.255.255.0
            suffix:
              type: integer
              description: The suffix of the network
              example: 24
        next-hop:
          type: string
          description: The next-hop address/interface of the route
          example: ens160
        ad:
          type: integer
          format: uint8
          description: The administrative distance
          example: 1
        tag:
          type: integer
          format: uint32
          description: The tag of the route
          example: null
security:
  - ApiKeyAuth: []